require('dotenv').config();
const express = require('express');
const nodemailer = require('nodemailer');
const bodyParser = require('body-parser');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Nodemailer configuration with a timeout option
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    },
    // Add a connection timeout of 10 seconds
    connectionTimeout: 10000
});

// Route for handling email sending
app.post('/api/send_email', async (req, res) => {
    const { name, phone, service, email } = req.body;

    // Basic input validation
    if (!name || !phone || !service || !email) {
        return res.status(400).json({ message: 'All fields are required.' });
    }

    const mailOptions = {
        from: process.env.EMAIL_USER,
        to: 'yami.manju@gmail.com', // Replace with your email
        subject: 'New Service Quote Request',
        html: `
        <div style="font-family: Arial, sans-serif; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px;">
            <h2 style="color: #4CAF50; font-size: 24px; margin-bottom: 20px;">New User Registration</h2>
            <p style="font-size: 16px; margin-bottom: 20px;">You have received a new user request with the following details:</p>
            <div style="margin-bottom: 12px;">
                <strong style="display: block; font-size: 16px; color: #4CAF50;">Name:</strong>
                <span style="font-size: 16px; color: #333;">${name}</span>
            </div>
            <div style="margin-bottom: 12px;">
                <strong style="display: block; font-size: 16px; color: #4CAF50;">Phone:</strong>
                <span style="font-size: 16px; color: #333;">${phone}</span>
            </div>
            <div style="margin-bottom: 12px;">
                <strong style="display: block; font-size: 16px; color: #4CAF50;">Service Needed:</strong>
                <span style="font-size: 16px; color: #333;">${service}</span>
            </div>
            <div style="margin-bottom: 12px;">
                <strong style="display: block; font-size: 16px; color: #4CAF50;">Email:</strong>
                <span style="font-size: 16px; color: #333;">${email}</span>
            </div>
            <p style="margin-top: 20px; font-size: 14px; color: #555;">This email was automatically generated by your website.</p>
        </div>`
    };

    try {
        // Send response quickly before waiting for email completion
        res.status(200).json({ message: 'Email request received. Processing...' });

        // Attempt to send email asynchronously
        await transporter.sendMail(mailOptions);
        console.log('Email sent successfully');
    } catch (error) {
        console.error('Error sending email:', error);
    }
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
